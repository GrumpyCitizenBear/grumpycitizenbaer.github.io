<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 暴力熊的进阶笔记</title>
    <link>http://grumpycitizenbear.top/posts/</link>
    <description>Recent content in Posts on 暴力熊的进阶笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 20 May 2022 22:13:08 +0800</lastBuildDate><atom:link href="http://grumpycitizenbear.top/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MD5信息摘要算法学习笔记</title>
      <link>http://grumpycitizenbear.top/posts/md5%E4%BF%A1%E6%81%AF%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 20 May 2022 22:13:08 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/md5%E4%BF%A1%E6%81%AF%E6%91%98%E8%A6%81%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>MD5算法为何不再安全 引出 你现在要从一个非官方网站下载一个程序，你怎么证明下载的内容与官方网站的相同呢？又比如，当我们登陆账户时，账户密码都保存在远端服务器的数据库中，我们如何能保证账户的密码不会被公司内部人员偷窥呢？这时MD5就是一个很好的选择。
MD5（Message-Digest Algorithm 5），信息摘要算法，1992年由美国密码学家罗纳德李维斯特首次公开发布。可以把MD5看成一个转换器，我们可以任意的字符串，图片，文件甚至是程序转换成128bit的一串MD5值。它是典型的哈希函数，把任意长度的内容映射成固定的散列值。例如将”This is E2 team”放进去会得到”3E1D7861A4ACF267C55673220448CF35”，而将”This is E2 team!”放进去则会得到”57BFE56405F1EBBC07C038FF2FC9225C”。虽然只相差一个感叹号，但是得到的MD5值却大不相同。对于上述第一个应用场景，官网通常会给出程序的MD5值，我们只需要和非官方网站的MD5值相对比，如果二者相同，则说明程序没有问题。对于第二个场景，数据库通常会储存密码的MD5值。
原理 那我们为什么说MD5不再安全呢？我们需要首先从MD5的原理说起。
MD5生成散列值的算法大体分为三步：填充对齐、分块、多轮压缩。 第一步填充对齐中，计算机的内容都是0和1的二进制数，我们假定下面是我们输入的内容。他一共有715bit，我们需要将内容补齐为512的整数倍，这里需要补309bit的数据，使它成为1024bit。然后在补齐的内容中，最后64位用来表示原始数据的大小，中间剩下的内容第一个填1，剩下一个全部填0。
补齐后进行第二步分块，我们要把填充补齐的数据分割成若干个512bit的数据块。
然后进行最后一步多轮压缩。MD5最终生成的是128bit的散列值，作者将它分为4个部分，并将每个部分都设置一个特殊的不定的初始值。然后从第一个大块开始，用初始的4个值分别对每一块数据进行四轮与或非以及循环位移的位操作，经过16次运算后生成一个新的散列值。对于其他的数据块也是相同的操作，唯一的不同是使用的初始值为上一块的运算结果。最终我们会将1024bit的数据压缩为128bit的MD5值。
三种安全特性 现在我们已经知道了MD5的原理，可以解释MD5为何不再安全了。MD5是产生消息摘要的散列函数而并非加密算法，所以对MD5的攻击并不是用MD5值反推明文的内容，这是无法做到的，宏观上违反了信息论，微观上每次的压缩都会对数据造成损失。对于MD5的攻击一共分为三种：
原像攻击： MD5值最多有2128种，而它对应的是无穷多个内容，这样我们不难推出，一个MD5值会对应无穷个明文，只不过我们无法主动用MD5值反向推出任意一个产生出它的明文，抗原像攻击是人们对MD5的第一个基本安全要求，到目前为止没有可行的方案。
第二原像攻击： 给定一个明文，找到另外一个与它MD5值相同的明文，抗第二原像攻击是人们对MD5的第二个基本安全要求，到目前为止也没有有效的方案。
碰撞攻击： 这是让MD5安全性崩盘的真正原因，不指定明文和MD5值，只要有方法能够找到两个MD5值相同的消息就算成功。2004年，中国山东大学的王小云团队找到了快速发现大量MD5真碰撞的方法。大体方法是找到局部碰撞，然后找到差分路径，再利用消息修改技术最后得到能产生碰撞的消息对。最终在15分钟到1小时内找到了碰撞对，但生成的而内容是可以构造出来的，大多都是乱码。
在后续的研究中，2007年，埃因霍芬理工大学的Marc Steven提供了两项新的研究，第一项研究是用一个内容产生另外两个MD5值相同，但内容不一样的消息。更重要的是生成的内容有意义，他还同时发布了一个叫Fastcoll的软件，软件可以用一张图片生成另外两张看起来相同，MD5值也相同的图片，但是他们的源码中结尾的内容会有偏差，这被称为相同前缀碰撞。
在保证前缀数据保留内容本身意义的前提下，构造后缀数据，使得MD5值相同，这就非常危险了，如果用可执行程序作为前缀，攻击者就可以绕过审核发布恶意的钓鱼软件，只要让程序在内部做一个判断跳转到恶意软件内即可。
但是杀毒软件还是有能力发现文件的可疑之处，如果能生成两个完全不同的软件，一个清白，一个坏事做尽，但他们的MD5值却一样，这就是他的第二项研究成果，生成两个MD5一样，前缀内容也不相同的文件，称之为选择前缀碰撞，作者本人提供的例子中有两个MD5值相同，但一个输出Hello World，另一个循环输出Goodbye World的程序。
这让我们对MD5的安全性产生极大的怀疑。选择前缀碰撞还对数字签名产生巨大的威胁，我给一个人开一张1000$的数字支票，用MD5做数字签名的摘要算法来验证数字支票的真伪，那我完全可以在一开始的时候生成两个MD5值相同的数字支票，一个金额1000$，一个金额10$，把1000$的给别人，然后用10$的来抵赖。
写在最后 MD5的安全性虽然已经被突破，但是在某些应用场景中任然可以起到关键作用，如刚开始举的两个例子就不会被威胁到安全性。也就是说属于原像攻击和第二原像攻击的范围还可以使用MD5。我们还可以使用更加安全的SHA-1算法保证万无一失。
参考网站：https://www.win.tue.nl/hashclash/</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://grumpycitizenbear.top/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Fri, 26 Nov 2021 15:23:42 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML常用标签 MDN官网
一、所有标签都有的属性  标记 class 格式 style 使元素被编辑 contenteditable 让一个东西看不到 hidden id 在html中是唯一的，可以作为链接锚，通过js或者css改变样式 控制tab键的顺序 tabindex 显示完整内容 title  二、章节标签  标题 h1-h6 章节 section 文章 article 段落 p 头部 header 脚步 footer 主要内容 main 旁支内容 aside 划分 div  三、内容标签  ol+li ul+li dl+dt+dd pre 保留空格回车tab code 代码 hr 分割线 br 换行 a 链接  1.href （1）超链接 （2）href的取值 网址 路径 伪协议（javascript：代码；、mailto：邮箱、tel：电话） id 2.target （1）_blank 在空白页面打开 （2）_self 在当前页面打开 （3）_top 在顶部打开页面 （4）_parent 在父页面打开页面 （5）程序猿的命名 固定窗口xxx（windows的name、iframe的name） 3.</description>
    </item>
    
    <item>
      <title>basic steps of web crawler</title>
      <link>http://grumpycitizenbear.top/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Wed, 10 Nov 2021 20:18:12 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>浅析URL url包括哪些部分  url=协议+域名或IP+端口+路径+查询参数+锚点   协议 域名或IP 端口 路径 查询参数 锚点  DNS的作用是什么  域名系统 (Domain Name System) 靠它把你要访问的网址找到然后把信息送到你电脑上  IP的作用是什么 域名是什么 </description>
    </item>
    
    <item>
      <title>java-multithreading</title>
      <link>http://grumpycitizenbear.top/posts/java-multithreading/</link>
      <pubDate>Wed, 03 Nov 2021 10:23:05 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/java-multithreading/</guid>
      <description>多线程与并发 线程与进程 进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个进程一直运行，知道所有的非守护线程都结束运行后才结束。
线程：一条线程指的是进程中一个单一顺序的控制流，一个进程可以并发多个线程，每条线程并行执行不同的任务。一个线程不能独立存在，它必须是进程的一部分。
为什么需要多线程  cpu的计算速度很快  可以看一下这篇文章《我是一个CPU：这个世界慢！死！了！》
现在的cpu都是多核的，如果程序只有一个线程，那么cpu永远都在等&amp;hellip;&amp;hellip;
Java的执行模式是同步/阻塞（block）的    同步、异步：针对客户端。
  同步：客户端请求后等待返回。应用程序执行一个系统调用，在系统调用没有完成，应用程序会一直阻塞。、
  异步：客户端请求发出后，不用等待返回结果，执行下一步动作，当系统调用返回时，通过状态、通知来通知调用者，或通过回调函数处理这个调用。
  阻塞、非阻塞：针对服务器。
  阻塞调用：是指调用结果返回之前，当前线程会被挂起。函数只有在得到结果之后才会返回。
  非阻塞调用：指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。原文链接
  Java默认情况下只有一个线程   处理问题非常自然 但具有严重的性能问题  一个线程的生命周期  新建状态  使用new以及Thread类或其子类创建一个线程对象
就绪状态  使用start（）方法之后，线程进入就绪状态，等待JVM里的线程调度器的调度。
运行状态  如果就绪状态的线程获取CPU资源，就可以执run（），此时线程便处于运行状态。
运行状态下的线程非常复杂，可以变为阻塞状态、就绪状态和死亡状态
阻塞状态  如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：
 等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。 同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。 其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。  死亡状态  一个运行状态的线程完成任务或者其他终止条件发生时，该线程切换到终止状态。</description>
    </item>
    
    <item>
      <title>Collection体系原理</title>
      <link>http://grumpycitizenbear.top/posts/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 21 Oct 2021 21:29:50 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/collection%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86/</guid>
      <description>Collection 体系原理 一、体系简介 1.为什么要有集合？  数组不能实现动态扩容 数组不便于添加、修改、删除 数组可以储存重复元素  2.Collection接口主要有两种子类型集合：List、Set  Collection接口储存一组不唯一，无序的对象 List接口储存一组不唯一，有序（插入顺序）的对象 Set接口储存一组唯一，无序的对象 Map接口储存一组键值对象，提供key和value的映射  二、List 1.ArrayList：本质上就是一个数组 2.动态扩容的实现方式 创建一个更大的空间，把原先所有的元素拷贝过去
private void grow(int minCapacity) {  // overflow-conscious code  int oldCapacity = elementData.length;  int newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1);  if (newCapacity - minCapacity &amp;lt; 0)  newCapacity = minCapacity;  if (newCapacity - MAX_ARRAY_SIZE &amp;gt; 0)  newCapacity = hugeCapacity(minCapacity);  // minCapacity is usually close to size, so this is a win:  elementData = Arrays.</description>
    </item>
    
    <item>
      <title>Maven包管理的一些见解和总结</title>
      <link>http://grumpycitizenbear.top/posts/maven%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%81%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 21 Oct 2021 10:42:06 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/maven%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%81%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</guid>
      <description>Java的包管理与maven 一、什么是包？ 1.如果要知道什么是包，那么首先要了解一下JVM的工作模式 其实很简单，只需要两步：
  执行一个类的字节码
  假如在这个过程中碰到了新的类，加载它
1、2步循环执行，直到完成整个程序
  2.同时我们还要知道在哪里可以找到类？ classpath类路径
类的权限定类名（目录层级）唯一确定了一个类
3.包就是把许多类放在一起打的压缩包 通常以.jar扩展名结尾，也可以手动改为zip
4.传递性依赖 通俗的说，就是你的程序依赖的类还依赖了别的类
产生的问题：
 如果classpath中有重名的类，会优先使用排在前面的类 这样会导致程序在未来的某一天因为改变了classpath而出现bug  引申出包管理➡️
二、什么是包管理 你要使用一些第三方的类，需要告诉JVM去哪里找
包管理的本质就是告诉JVM如何找到所需的第三方类库，以及成功解决其中的冲突问题
三、包管理的发展历史 1.Apache Ant  手动下载jar包，放在一个目录中 写XML配置，指定编译的源代码目录、依赖的jar包、输出目录等 缺点  每个人都要造自己的轮子 第三方类库需要手动下载（如果依赖了10000个。。。。） 没有解决包冲突问题    2.Maven 四、maven包管理 maven远不止包管理工具
1.maven的仓库   maven的中央仓库 按照一定的约定储存包
  maven的本地仓库 默认位置 ～/.m2
  2.maven的编号  groupid artifactid version  maven的包按照约定为所有的包编号，方便检索
3.maven的传递性依赖自动管理 原则：决不允许出现同名不同版本号的jar包 解决方案：1.选择离项目最近的 2.如果距离相同，选择版本号靠前的 4.会产生包冲突 举个例子 我的项目➡️A➡️B➡️C(2.</description>
    </item>
    
    <item>
      <title>有关getter和setter的用法</title>
      <link>http://grumpycitizenbear.top/posts/%E6%9C%89%E5%85%B3getter%E5%92%8Csetter%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 14 Oct 2021 16:42:27 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/%E6%9C%89%E5%85%B3getter%E5%92%8Csetter%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>有关getter和setter的用法和理解  setter方法    作用：用来设置成员变量，可以在方法里面过滤掉一些不合理的值。
  命名规范：
 必须是对象方法。 返回值类型为void。 方法名必须以set开头，而且后面跟上成员变量名去掉“_”首字母必须大写（可以使用快捷键创立getter和setter）。 必须提供一个参数，参数类型必须与所对应的成员变量的类型一致。 形参名称和成员变量去掉下划线相同。    setter方法的好处
 不让数据暴露在外，保证了数据的安全性。 对设置的数据进行过滤。    getter方法    作用：为调用者返回对象内部的成员变量值。
  命名规范：
 必须是对象方法。 必须有返回值，返回值的类型和成员变量的类型一致。 方法名必须是成员变量去掉下划线。 一定是没有参数的。    getter方法的好处
 可以让我们在使用getter方法获取数据之前,对数据进行加工。 比如双十一活动，我们希望对全线商品的价格在原来的价格基础上打五折，那么我们只要去改成品类的价格的getter方法就可以了，让他返回的值为价格 * 0.5。    getter/setter方法注意    在实际的开发中,不一定set和get方法都会提供,如果内部的成员变量,比如学生的学号或计算出来的数据。这样的数据只允许外界读取，但是不允许修改的情况,则通常只提􏰀供get方法而不􏰀提供set方法 。
  成员变量名的命名以下划线开头,get方法名不需要带下划线。
  成员变量名使用下划线开头有两个好处。
 与get方法的方法名区分开来。 可以和一些其他的局部变量区分开来,下划线开头的变量,通常都是类的成员变量。当我看到以下划线开头变量，那么他一定是成员变量。    </description>
    </item>
    
    <item>
      <title>简介</title>
      <link>http://grumpycitizenbear.top/posts/my-first-post/</link>
      <pubDate>Thu, 14 Oct 2021 09:42:27 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/my-first-post/</guid>
      <description>这是我的个人博客 介绍一下我  姓名： 赵雄皓 性别： 男 年龄： 21 生日： 2000.03.26 学校： 天津工业大学 爱好： 世间一切的新奇未知  这里将记录我在计算机之路的进阶过程 持续更新中&amp;hellip;&amp;hellip; </description>
    </item>
    
  </channel>
</rss>
