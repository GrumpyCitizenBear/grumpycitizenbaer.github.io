<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 暴力熊的进阶笔记</title>
    <link>http://grumpycitizenbear.top/posts/</link>
    <description>Recent content in Posts on 暴力熊的进阶笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 21 Oct 2021 10:42:06 +0800</lastBuildDate><atom:link href="http://grumpycitizenbear.top/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Maven包管理的一些见解和总结</title>
      <link>http://grumpycitizenbear.top/posts/maven%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%81%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 21 Oct 2021 10:42:06 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/maven%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%81%E8%A7%A3%E5%92%8C%E6%80%BB%E7%BB%93/</guid>
      <description>Java的包管理与maven 一、什么是包？ 1.如果要知道什么是包，那么首先要了解一下JVM的工作模式 其实很简单，只需要两步：
  执行一个类的字节码
  假如在这个过程中碰到了新的类，加载它
1、2步循环执行，直到完成整个程序
  2.同时我们还要知道在哪里可以找到类？ classpath类路径
类的权限定类名（目录层级）唯一确定了一个类
3.包就是把许多类放在一起打的压缩包 通常以.jar扩展名结尾，也可以手动改为zip
4.传递性依赖 通俗的说，就是你的程序依赖的类还依赖了别的类
产生的问题：
 如果classpath中有重名的类，会优先使用排在前面的类 这样会导致程序在未来的某一天因为改变了classpath而出现bug  引申出包管理➡️
二、什么是包管理 你要使用一些第三方的类，需要告诉JVM去哪里找
包管理的本质就是告诉JVM如何找到所需的第三方类库，以及成功解决其中的冲突问题
三、包管理的发展历史 1.Apache Ant  手动下载jar包，放在一个目录中 写XML配置，指定编译的源代码目录、依赖的jar包、输出目录等 缺点  每个人都要造自己的轮子 第三方类库需要手动下载（如果依赖了10000个。。。。） 没有解决包冲突问题    2.Maven 四、maven包管理 maven远不止包管理工具
1.maven的仓库   maven的中央仓库 按照一定的约定储存包
  maven的本地仓库 默认位置 ～/.m2
  2.maven的编号  groupid artifactid version  maven的包按照约定为所有的包编号，方便检索
3.maven的传递性依赖自动管理 原则：决不允许出现同名不同版本号的jar包 解决方案：1.选择离项目最近的 2.如果距离相同，选择版本号靠前的 4.会产生包冲突 举个例子 我的项目➡️A➡️B➡️C(2.</description>
    </item>
    
    <item>
      <title>有关getter和setter的用法</title>
      <link>http://grumpycitizenbear.top/posts/%E6%9C%89%E5%85%B3getter%E5%92%8Csetter%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 14 Oct 2021 16:42:27 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/%E6%9C%89%E5%85%B3getter%E5%92%8Csetter%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>有关getter和setter的用法和理解  setter方法    作用：用来设置成员变量，可以在方法里面过滤掉一些不合理的值。
  命名规范：
 必须是对象方法。 返回值类型为void。 方法名必须以set开头，而且后面跟上成员变量名去掉“_”首字母必须大写（可以使用快捷键创立getter和setter）。 必须提供一个参数，参数类型必须与所对应的成员变量的类型一致。 形参名称和成员变量去掉下划线相同。    setter方法的好处
 不让数据暴露在外，保证了数据的安全性。 对设置的数据进行过滤。    getter方法    作用：为调用者返回对象内部的成员变量值。
  命名规范：
 必须是对象方法。 必须有返回值，返回值的类型和成员变量的类型一致。 方法名必须是成员变量去掉下划线。 一定是没有参数的。    getter方法的好处
 可以让我们在使用getter方法获取数据之前,对数据进行加工。 比如双十一活动，我们希望对全线商品的价格在原来的价格基础上打五折，那么我们只要去改成品类的价格的getter方法就可以了，让他返回的值为价格 * 0.5。    getter/setter方法注意    在实际的开发中,不一定set和get方法都会提供,如果内部的成员变量,比如学生的学号或计算出来的数据。这样的数据只允许外界读取，但是不允许修改的情况,则通常只提􏰀供get方法而不􏰀提供set方法 。
  成员变量名的命名以下划线开头,get方法名不需要带下划线。
  成员变量名使用下划线开头有两个好处。
 与get方法的方法名区分开来。 可以和一些其他的局部变量区分开来,下划线开头的变量,通常都是类的成员变量。当我看到以下划线开头变量，那么他一定是成员变量。    </description>
    </item>
    
    <item>
      <title>简介</title>
      <link>http://grumpycitizenbear.top/posts/my-first-post/</link>
      <pubDate>Thu, 14 Oct 2021 09:42:27 +0800</pubDate>
      
      <guid>http://grumpycitizenbear.top/posts/my-first-post/</guid>
      <description>这是我的个人博客 介绍一下我  姓名： 赵雄皓 性别： 男 年龄： 21 生日： 2000.03.26 学校： 天津工业大学 爱好： 世间一切的新奇未知  这里将记录我在计算机之路的进阶过程 持续更新中&amp;hellip;&amp;hellip; </description>
    </item>
    
  </channel>
</rss>
